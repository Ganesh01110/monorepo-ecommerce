generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String      @id @default(cuid())
  name                 String
  email                String      @unique
  password             String
  avatar               Avatar      @relation(fields: [avatarId], references: [id])
  role                 String      @default("user")
  createdAt            DateTime    @default(now())
  resetPasswordToken   String?
  resetPasswordExpire  DateTime?

  avatarId             String

  // Relations
  reviews              Review[]
  orders               Order[]
  products             Product[]

  @@map("users")
}

model Avatar {
  id         String  @id @default(cuid()) 
  public_id  String  
  url        String
  user       User?

  @@map("avatars")
}

model Product {
  id           String    @id @default(cuid())
  name         String
  description  String
  price        Float
  ratings      Float      @default(0)
  images       Image[]
  category     String
  stock        Int        @default(1)
  numOfReviews Int        @default(0)
  reviews      Review[]
  userId       String
  user         User       @relation(fields: [userId], references: [id], map: "fk_userId")
  createdAt    DateTime   @default(now())

  orderItems   OrderItem[]

  @@map("products")
}

model Image {
  id         String    @id @default(cuid())
  public_id  String
  url        String
  productId  String
  product    Product   @relation(fields: [productId], references: [id], map: "fk_productId")

  @@map("images")
}


model Review {
  id       String    @id @default(cuid())
  userId   String
  user     User      @relation(fields: [userId], references: [id], map: "fk_review_userId")
  name     String
  rating   Float
  comment  String
  product  Product?  @relation(fields: [productId], references: [id], map: "fk_review_productId")
  productId String?

  @@map("reviews")
}

model Order {
  id             String       @id @default(cuid())
  shippingInfo   ShippingInfo @relation(fields: [shippingInfoId], references: [id], map: "fk_shippingInfoId")
  orderItems     OrderItem[]
  userId         String
  user           User         @relation(fields: [userId], references: [id], map: "fk_order_userId")
  paymentInfo    PaymentInfo 
  paidAt         DateTime
  itemsPrice     Float
  taxPrice       Float
  shippingPrice  Float
  totalPrice     Float
  orderStatus    String       @default("Processing")
  deliveredAt    DateTime?
  createdAt      DateTime     @default(now())

  shippingInfoId String       @unique
  paymentInfoId  String       @unique

  @@map("orders")
}

model ShippingInfo {
  id        String  @id @default(cuid())
  address   String
  city      String
  state     String
  country   String
  pinCode   Int
  phoneNo   String
  order     Order?   

  @@map("shipping_infos")
}

model OrderItem {
  id        String   @id @default(cuid())
  name      String
  price     Float
  quantity  Int
  image     String
  productId String
  product   Product  @relation(fields: [productId], references: [id], map: "fk_orderItem_productId")
  order     Order    @relation(fields: [orderId], references: [id], map: "fk_orderItem_orderId")

  orderId   String

  @@map("order_items")
}

model PaymentInfo {
  id      String  @id @default(cuid())
  status  String
  orderId String  @unique
  order   Order   @relation(fields: [orderId], references: [id], map: "fk_paymentInfo_orderId")

 

  @@map("payment_infos")
}
