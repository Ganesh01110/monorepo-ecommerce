generator client {
  provider = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["order", "product","user"]
}


// order schema


model Order {
  id            String        @id @default(auto()) @map("_id")
  shippingInfo  ShippingInfo
  orderItems    OrderItem[]
  userId        String
  user          User          @relation(fields: [userId], references: [id])
  paymentInfo   PaymentInfo
  paidAt        DateTime
  itemsPrice    Float
  taxPrice      Float
  shippingPrice Float
  totalPrice    Float
  orderStatus   String        @default("Processing")
  deliveredAt   DateTime?
  createdAt     DateTime      @default(now())

  @@schema("order")
}

model ShippingInfo {
  id      String @id @default(auto()) @map("_id")
  address String
  city    String
  state   String
  country String
  pinCode Int
  phoneNo Int

  @@schema("order")
}

model OrderItem {
  id        String   @id @default(auto()) @map("_id")
  name      String
  price     Float
  quantity  Int
  image     String
  productId String
  product   Product  @relation(fields: [productId], references: [id])

  @@schema("order")
}

model PaymentInfo {
  id     String @id @default(auto()) @map("_id")
  paymentId String
  status String

  @@schema("order")
}

model User {
  id      String  @id @default(auto()) @map("_id")
  orders  Order[]
  // Add other fields for the User model as necessary

  @@schema("order")
}

model Product {
  id       String      @id @default(auto()) @map("_id")
  orderItems OrderItem[]
  // Add other fields for the Product model as necessary

  @@schema("order")
}


// product schema

model Product {
  id           String       @id @default(auto()) @map("_id")
  name         String
  description  String
  price        Float
  ratings      Float        @default(0)
  images       Image[]
  category     String
  stock        Int          @default(1)
  numOfReviews Int          @default(0)
  reviews      Review[]
  userId       String
  user         User         @relation(fields: [userId], references: [id])
  createdAt    DateTime     @default(now())

  @@schema("product")
}

model Image {
  id        String @id @default(auto()) @map("_id")
  public_id String
  url       String
  product   Product @relation(fields: [productId], references: [id])
  productId String

  @@schema("product")
}

model Review {
  id        String   @id @default(auto()) @map("_id")
  userId    String
  name      String
  rating    Float
  comment   String
  productId String
  product   Product  @relation(fields: [productId], references: [id])

  @@schema("product")
}

model User {
  id       String     @id @default(auto()) @map("_id")
  products Product[]
  reviews  Review[]
  // Add other fields for the User model as necessary

  @@schema("product")
}


// user schema

model User {
  id                   String    @id @default(cuid())
  name                 String
  email                String    @unique
  password             String
  avatar               Avatar    @relation(fields: [avatarId], references: [id])
  role                 String    @default("user")
  createdAt            DateTime  @default(now())
  resetPasswordToken   String?
  resetPasswordExpire  DateTime?

  avatarId             String


  @@schema("user")
}

model Avatar {
  id         String  @id @default(cuid())
  public_id  String
  url        String
  user       User?

  userId     String? @unique

  @@schema("user")
}

